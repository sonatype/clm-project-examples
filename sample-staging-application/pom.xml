<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.sonatype.nexus.clm</groupId>
	<artifactId>sample-staging-application</artifactId>
	<version>1.0</version>
	<packaging>jar</packaging>

	<name>Sonatype Nexus CLM Sample</name>

	<distributionManagement>
		<!-- repository> <id>nexus</id> <name>Corporate Repository</name> <url>http://localhost:8081/nexus/service/local/staging/deploy/maven2</url> 
			</repository> -->
		<snapshotRepository>
			<id>nexus</id>
			<name>Corporate Repository</name>
			<url>http://localhost:8081/nexus/content/repositories/snapshots</url>
		</snapshotRepository>
	</distributionManagement>

	<build>
		<plugins>
			<plugin>
				<!-- This plugin replaces the standard maven-deploy-plugin in the lifecycle. 
					It stores artifacts locally until the last module in a build and then uploads 
					them all at once to Nexsu for staging. It will automatically close the staging 
					repository which invokes the first set of rules -->
				<groupId>org.sonatype.plugins</groupId>
				<artifactId>nexus-staging-maven-plugin</artifactId>
				<version>1.4.4</version>

				<!-- this tells maven that there are pieces of the plugin which participate 
					in the build plan, pre-execution -->
				<extensions>true</extensions>
				<configuration>
					<!--If the rules fail on auto close, then leave the repo in Nexus. This 
						will allow users to review the CLM Report -->
					<keepStagingRepositoryOnCloseRuleFailure>true</keepStagingRepositoryOnCloseRuleFailure>

					<!-- The id in your maven settings file that has the credentials needed 
						for staging -->
					<serverId>nexus</serverId>
					<nexusUrl>http://localhost:8081/nexus/</nexusUrl>

					<!-- Force the selection of the profile instead of letting Nexus choose -->
					<!--stagingProfileId>com.brian</stagingProfileId -->
				</configuration>
				<executions>
					<execution>
						<!-- This invokes the plugin in the deploy phase. If this is not the 
							last module, then the artifacts are stored locally. If it is the last module, 
							the staging will occur immediately. -->
						<id>deploy-staged</id>
						<phase>deploy</phase>
						<goals>
							<goal>deploy</goal>
						</goals>
					</execution>

					<execution>
						<!-- This execution will immediately ask Nexus to release the staging 
							repository. This will only happen if the previous rule execution was successfull. 
							Setting the system up this way allows staging to act like a high speed tolling 
							station where builds don't stop in staging unless there is a violation of 
							the configured policy. -->
						<id>release</id>
						<phase>deploy</phase>
						<goals>
							<goal>release</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<!-- This plugin fingerprints the components used in the actual build. 
					This information is used by Nexus CLM to perform analysis of all the transitive 
					dependencies. Nexus will also inspect the contents of any component that 
					is staged (ie zips, wars) to find additional components that need to be vetted -->
				<groupId>com.sonatype.clm</groupId>
				<artifactId>clm-maven-plugin</artifactId>
				<version>2.0.5</version>
				<executions>
					<execution>
						<goals>
							<goal>attach</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<!-- We need to ensure that the standard deploy plugin doesn't interfere 
					with Staging. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<!-- Next follows a number of dependencies, some of them with known copyleft 
		licenses and/or security issues -->
	<dependencies>
		<dependency>
			<groupId>org.sonatype.clm</groupId>
			<artifactId>sample-application-imports</artifactId>
			<version>1.0</version>
			<scope>import</scope>
			<type>pom</type>
		</dependency>
	</dependencies>
</project>
